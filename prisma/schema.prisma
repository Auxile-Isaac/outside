generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @default(cuid()) @id
  clerkUserId      String?     @unique
  firstName        String
  lastName         String
  email            String      @unique
  username         String      @unique
  phoneNumber      String?     @unique
  password         String?
  image            String?
  role             UserRole    @default(NORMAL)
  emailVerified    DateTime?   @map("email_verified")
  listings         Listing[]   @relation("Listing_user")
  bookings         Booking[]   @relation("Booking_user")
  likes            Like[]      @relation("Like_user")
  searches         Search[]    @relation("Search_user")
  session          Session?    @relation("Session_user")
  createdAt        DateTime    @default(now()) @map(name: "created_at")
  updatedAt        DateTime    @updatedAt @map(name: "updated_at")
}

enum UserRole {
  NORMAL
  ALPHA
}

model Category {
  id        Int       @id @unique @default(autoincrement())
  name      String
  listings  Listing[]
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
}

model Listing {
  id            String          @id @unique @default(cuid())
  name          String
  host          User         @relation("Listing_user", fields: [hostId], references: [id])
  hostId        String
  images        String[]
  shortCaption  String
  description   String
  phoneNumber   String?
  price         Decimal
  startDate     DateTime
  endDate       DateTime
  location      String
  coordinates   Coordinates? @relation(fields: [coordinatesId], references: [id])
  likes         Like[]       @relation("Like_listing")
  bookings      Booking[]    @relation("Booking_listing")
  coordinatesId Int?
  categories    Category[]
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  Approved      Boolean      @default(false)
}

model Like {
  id        String   @id @unique  @default(cuid())
  user      User     @relation("Like_user", fields: [userId], references: [id])
  userId    String
  listing   Listing  @relation("Like_listing", fields: [listingId], references: [id])
  listingId String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Booking {
  id        String      @id @unique @default(cuid())
  user      User     @relation("Booking_user", fields: [userId], references: [id])
  userId    String
  listing   Listing  @relation("Booking_listing", fields: [listingId], references: [id])
  listingId String
  request   String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Search {
  id        String      @id @unique @default(cuid())
  keyword   String
  timestamp DateTime @default(now())
  user      User?    @relation("Search_user", fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Coordinates {
  id        Int       @id @unique @default(autoincrement())
  name      String
  latitude  Float
  longitude Float
  listingId String
  listings  Listing[] @relation
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
}

model Session {
  id           String      @id @default(cuid())
  userId       String      @unique
  token        String
  expires      DateTime?
  user         User        @relation("Session_user", fields: [userId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}


